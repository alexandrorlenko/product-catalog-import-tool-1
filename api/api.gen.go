// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
)

// Error defines model for error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// DefaultError defines model for defaultError.
type DefaultError Error

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /health)
	GetHealth(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	siw.Handler.GetHealth(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerFromMuxWithBaseURL(si, r, "")
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	r.Group(func(r chi.Router) {
		r.Get(baseURL+"/health", wrapper.GetHealth)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/3SST2/UPBDGv0o073s08VI45USFVqUSAqQeqx68zsRxldhmZrILWuW7I9vZ/qHiFHvm",
	"yc+PPc8ZbJxTDBiEoTsDIacYGMumx8Esk+yJIuW9jUEwSF6alCZvjfgY9CPHkGtsR5xNXv1POEAH/+ln",
	"uK5d1lho67oq6JEt+ZQh0MES8FdCK9g3F43amMUNXmwkiglJfDVpY4/5K78TQgc+CDokWBXMyGzcyyYL",
	"+eAKmPDn4gl76O4r4ln/oC76eHhEK9WsD0O8PIKx5RFwNn6CDtDRcjj4T4xCMXhrWhtnUBDMnCn7o8Pg",
	"TXNTVPDm4sLN0Uy+NxKpuf5xCwombzFwsb5BrpOxIzZX7Q4ULJSPHUUSd1qfTqfWlHYbyentX9Zfbz/v",
	"v93t3121u3aUeconC9LM34c7pKO3uEE6rflknENqfdRFokGBeJnwL3+g4IjE1fj7dtfuMjUmDCZ56OBD",
	"KSlIRsYyHj2imWTMS4dSU/Xy8g6FGxmxqbomDmXHm8HCppKz2x46uEH5UoHqdVavdh/fwnmxFpmbi7K+",
	"fQn1v2L6BNWv0r+uJQTZFhJDd3/ehqDzvdccGeNqfRuYjWHwbqneYVVPDWNzhWF9WP8EAAD//7H9nh5+",
	"AwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
